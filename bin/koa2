#!/usr/bin/env node
const { Command } = require('commander')
const ora = require('ora')
const atj = require('await-to-js')
const path = require('path')
const chalk = require('chalk')
const utils = require('../src/utils')
const program = new Command()

;(() => {
  program
    .version(require('../package').version, '-v, --version')
    .usage('init <project-name>')
  program
    .command('init <project-name>')
    .description('generate a new project')
    .action(async projectName => {
      const [err] = await atj.to(main(projectName))
      err ? utils.log(err, 'error') : utils.log(destPath + '/bin/www', 'note')
    })
  program.on('--help', () => {
    utils.log()
    utils.log('  Example:')
    utils.log()
    utils.log('     # create a new project', 'note')
    utils.log('     $ koa2 init my-project')
    utils.log()
  })
  program.parse(process.argv)
})()
/**
 * 入口函数
 */
async function main(projectName) {
  let err,
    result,
    destPath = program.args.pop() || '.'
  // 检查目录是否为空
  ;[err, result] = await atj.to(utils.emptyDir(destPath))
  if (err && 'ENOENT' !== err.code) utils.log(err, 'error')
  if (result) {
    ;[err, result] = await atj.to(
      utils.confirm('destination is not empty, continue? [y/N] ')
    )
    if (err && !result) {
      console.error('aborting')
      process.exit()
    } else {
      process.stdin.destroy()
      await init(destPath, projectName)
    }
  } else await init(destPath, projectName)
}

/**
 * @description 初始化目录模板文件
 * @param {*} destPath 目标路径
 * @param {*} projectName 项目名称
 */
async function init(destPath, projectName) {
  const www = path.join(__dirname, '..', 'template', 'www'),
    config = path.join(__dirname, '..', 'template', 'config.js'),
    app = path.join(__dirname, '..', 'template', 'app.js'),
    router = path.join(__dirname, '..', 'template', 'router.js'),
    errorList = path.join(__dirname, '..', 'template', 'errorlist.js'),
    token = path.join(__dirname, '..', 'template', 'token.js'),
    getReq = path.join(__dirname, '..', 'template', 'getReq.js'),
    upload = path.join(__dirname, '..', 'template', 'upload.js'),
    pm2 = path.join(__dirname, '..', 'template', 'pm2.json'),
    pkg = {
      name: projectName,
      version: '1.0.0',
      private: true,
      scripts: {
        dev: 'nodemon ./bin/www',
        start: 'npm run dev',
        test: 'echo "Error: no test specified" && exit 1',
        author: 'ipenman',
        license: 'ISC'
      },
      dependencies: {
        '@koa/cors': '^3.0.0',
        '@koa/multer': '^2.0.2',
        jsonwebtoken: '^8.5.1',
        koa: '^2.11.0',
        'koa-body': '^4.1.1',
        'koa-multer': '^1.0.2',
        'koa-onerror': '^4.1.0',
        'koa-router': '^7.4.0',
        'koa-static': '^5.0.0',
        moment: '^2.24.0',
        'node-dbs': '^1.0.2',
        nodemon: '^1.19.4',
        'public-ip': '^3.2.0',
        tracer: '^1.0.2'
      }
    }
  console.log()
  ora(chalk.blue('开始初始化...')).start()
  console.log()
  console.log()
  await createDir(destPath)
  await createFile(
    destPath,
    { www, config, app, router, errorList, token, getReq, upload, pm2, pkg },
    projectName
  )
  ora(chalk.green('初始化成功!')).succeed()
  console.log()
  process.exit()
}

/**
 * @description 创建目录
 * @param {*} destPath 目标路径
 */
async function createDir(destPath) {
  ora(chalk.blue('正在创建目录...')).start()
  console.log()
  console.log()
  await utils.mkdir(destPath)
  await utils.mkdir(destPath + '/bin')
  await utils.mkdir(destPath + '/public')
  await utils.mkdir(destPath + '/public/javascripts')
  await utils.mkdir(destPath + '/public/images')
  await utils.mkdir(destPath + '/public/dist')
  await utils.mkdir(destPath + '/DAL')
  await utils.mkdir(destPath + '/DB')
  await utils.mkdir(destPath + '/config')
  await utils.mkdir(destPath + '/service')
  await utils.mkdir(destPath + '/utils')
  await utils.mkdir(destPath + '/routes')
  ora(chalk.green('创建目录成功!')).succeed() // 成功调用
  console.log()
}

/**
 * @description 创建模板文件
 * @param {www, config, app, router, errorList, token, getReq, upload, pm2} 源文件路径集合
 * @param {*} projectName 项目名
 */
async function createFile(
  destPath,
  { www, config, app, router, errorList, token, getReq, upload, pm2, pkg },
  projectName
) {
  let err
  ora(chalk.blue('正在创建模板文件...')).start()
  console.log()
  console.log()
  await executeFile(
    destPath,
    '/bin/www',
    utils.copyFile(www, destPath + '/bin/www')
  )
  await executeFile(
    destPath,
    '/config/index.js',
    utils.copyFile(config, destPath + '/config/index.js')
  )
  await executeFile(
    destPath,
    '/app.js',
    utils.copyFile(app, destPath + '/app.js')
  )
  await executeFile(
    destPath,
    '/routes/index.js',
    utils.copyFile(router, destPath + '/routes/index.js')
  )
  await executeFile(
    destPath,
    '/utils/errorlist.js',
    utils.copyFile(errorList, destPath + '/utils/errorlist.js')
  )
  await executeFile(
    destPath,
    '/utils/token.js',
    utils.copyFile(token, destPath + '/utils/token.js')
  )
  await executeFile(
    destPath,
    '/utils/getReq.js',
    utils.copyFile(getReq, destPath + '/utils/getReq.js')
  )
  await executeFile(
    destPath,
    '/utils/upload.js',
    utils.copyFile(upload, destPath + '/utils/upload.js')
  )
  await executeFile(
    destPath,
    '/pm2.json',
    utils.copyFile(pm2, destPath + '/pm2.json')
  )
  await executeFile(
    destPath,
    '/package.json',
    utils.writeFile(JSON.stringify(pkg), destPath + '/package.json')
  )
  ora(chalk.green('模板文件创建完毕!')).succeed()
  console.log()
}
async function executeFile(destPath, fileName, fn) {
  ;[err] = await atj.to(fn)
  err
    ? utils.log(err, 'error')
    : utils.log('======' + destPath + fileName + '======', 'note')
  console.log()
}
